<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Créer une Landing Page</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="/tinymce/tinymce.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .form-card {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .input-field {
            width: 100%;
            padding: 0.5rem 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
        }
        .input-field:focus {
            outline: none;
            border-color: #1279FD;
            box-shadow: 0 0 0 3px rgba(18, 121, 253, 0.1);
        }
        .input-field.error {
            border-color: #dc2626;
        }
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background-color: #1279FD;
            color: white;
        }
        .btn-primary:hover {
            background-color: #0e63d1;
        }
        .btn-danger {
            background-color: #dc2626;
            color: white;
        }
        .btn-danger:hover {
            background-color: #b91c1c;
        }
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
        .loading::after {
            content: "...";
        }
        .color-picker {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-color: transparent;
            width: 50px;
            height: 50px;
            border: none;
            cursor: pointer;
        }
        .color-picker::-webkit-color-swatch {
            border-radius: 8px;
            border: 2px solid #e5e7eb;
        }
        .color-picker::-moz-color-swatch {
            border-radius: 8px;
            border: 2px solid #e5e7eb;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #1279FD;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .creation-method {
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }
        .creation-method:hover {
            border-color: #1279FD;
            background-color: #f0f9ff;
        }
        .creation-method.selected {
            border-color: #1279FD;
            background-color: #f0f9ff;
        }
    </style>
</head>
<body class="min-h-screen bg-gray-50">
    <div id="loadingOverlay" class="loading-overlay" style="display: none;">
        <div class="loading-spinner"></div>
    </div>

    <!-- Sidebar -->
    <aside class="fixed inset-y-0 left-0 bg-white shadow-lg max-h-screen w-60">
        <div class="flex flex-col justify-between h-full">
            <div class="flex-grow">
                <div class="px-4 py-6 text-center border-b">
                    <h1 class="text-xl font-bold leading-none"><span class="text-[#1279FD]">Admin</span> Panel</h1>
                </div>
                <div class="p-4">
                    <ul class="space-y-1">
                        <li>
                            <a href="/admin" class="flex items-center text-gray-600 hover:bg-gray-50 rounded-lg px-4 py-3 text-sm">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
                                </svg>
                                Dashboard
                            </a>
                        </li>
                        <li>
                            <a href="/admin/create" class="flex items-center bg-blue-50 rounded-lg font-bold text-[#1279FD] px-4 py-3 text-sm">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                                </svg>
                                Nouvelle Page
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="p-4">
                <a href="/logout" class="flex items-center text-gray-600 hover:text-gray-900 w-full px-4 py-2 text-sm">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                    </svg>
                    Déconnexion
                </a>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="ml-60 p-8">
        <div class="max-w-4xl mx-auto">
            <div class="mb-8">
                <a href="/admin" class="text-[#1279FD] hover:text-[#0e63d1] flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                    </svg>
                    Retour à l'administration
                </a>
            </div>

            <div class="form-card p-8">
                <h1 class="text-2xl font-bold text-gray-900 mb-6">Créer une nouvelle Landing Page</h1>

                <div class="mb-8">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Choisissez votre méthode de création</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Création manuelle -->
                        <div id="manualCreation" class="creation-method rounded-lg p-6" onclick="selectCreationMethod('manual')">
                            <div class="flex items-center mb-4">
                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                    <svg class="w-5 h-5 text-[#1279FD]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                    </svg>
                                </div>
                                <h3 class="text-lg font-medium">Création manuelle</h3>
                            </div>
                            <p class="text-gray-600">Créez votre landing page section par section avec un contrôle total sur le contenu.</p>
                        </div>

                        <!-- Création avec IA -->
                        <div id="aiCreation" class="creation-method rounded-lg p-6" onclick="selectCreationMethod('ai')">
                            <div class="flex items-center mb-4">
                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                    <svg class="w-5 h-5 text-[#1279FD]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                                    </svg>
                                </div>
                                <h3 class="text-lg font-medium">Création avec l'IA</h3>
                            </div>
                            <p class="text-gray-600">Générez rapidement du contenu pertinent avec notre assistant IA.</p>
                        </div>

                        <!-- Création depuis URL -->
                        <div id="urlCreation" class="creation-method rounded-lg p-6" onclick="selectCreationMethod('url')">
                            <div class="flex items-center mb-4">
                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                    <svg class="w-5 h-5 text-[#1279FD]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                                    </svg>
                                </div>
                                <h3 class="text-lg font-medium">Création depuis URL</h3>
                            </div>
                            <p class="text-gray-600">Importez le contenu depuis une URL existante et générez une landing page.</p>
                        </div>
                    </div>
                </div>

                <!-- Formulaire de création manuelle -->
                <form id="manualForm" class="space-y-6" style="display: none;">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="title">
                            Titre de la page
                        </label>
                        <input 
                            type="text" 
                            id="title" 
                            name="title" 
                            class="input-field"
                            onchange="updateSlug()"
                            required>
                        <div class="error-message" id="title-error"></div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="slug">
                            Slug de la page
                        </label>
                        <input 
                            type="text" 
                            id="slug" 
                            name="slug" 
                            class="input-field"
                            required>
                        <div class="error-message" id="slug-error"></div>
                    </div>

                    <div>
                        <h2 class="text-lg font-medium text-gray-900 mb-4">Couleurs de la page</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur principale
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="primaryColor"
                                    value="#1279FD">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur secondaire
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="secondaryColor"
                                    value="#0e63d1">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur d'accent
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="accentColor"
                                    value="#3b82f6">
                            </div>
                        </div>
                    </div>

                    <div>
                        <h2 class="text-lg font-medium text-gray-900 mb-4">Sections</h2>
                        <div id="sections" class="space-y-6">
                            <!-- Les sections seront ajoutées ici dynamiquement -->
                        </div>
                        <button type="button" 
                            class="mt-4 btn bg-green-500 text-white hover:bg-green-600"
                            onclick="addSection()">
                            <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                            </svg>
                            Ajouter une section
                        </button>
                    </div>

                    <input type="hidden" name="sections" id="sectionsData">
                    <input type="hidden" name="colors" id="colorsData">

                    <div class="flex justify-end pt-6 border-t">
                        <button type="submit" 
                            id="submitButton"
                            class="btn btn-primary"
                            onclick="submitForm(event)">
                            <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                            </svg>
                            Créer la page
                        </button>
                    </div>
                </form>

                <!-- Formulaire de création avec IA -->
                <form id="aiForm" class="space-y-6" style="display: none;">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="aiTitle">
                            Titre de la page
                        </label>
                        <input 
                            type="text" 
                            id="aiTitle" 
                            name="title" 
                            class="input-field"
                            required>
                        <div class="error-message" id="aiTitle-error"></div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="heroImage">
                            Image Hero
                        </label>
                        <input 
                            type="file" 
                            id="heroImage" 
                            name="heroImage" 
                            accept="image/*"
                            class="input-field"
                            required
                            onchange="validateImageSize(this)">
                        <p class="text-sm text-gray-500 mt-1">Taille maximale : 5 Mo</p>
                        <div class="error-message" id="heroImage-error"></div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="videoUrl">
                            URL de la vidéo
                        </label>
                        <input 
                            type="url" 
                            id="videoUrl" 
                            name="videoUrl" 
                            class="input-field"
                            placeholder="https://www.youtube.com/watch?v=..."
                            required>
                        <div class="error-message" id="videoUrl-error"></div>
                    </div>

                    <div>
                        <h2 class="text-lg font-medium text-gray-900 mb-4">Couleurs de la page</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur principale
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="aiPrimaryColor"
                                    value="#1279FD">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur secondaire
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="aiSecondaryColor"
                                    value="#0e63d1">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur d'accent
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="aiAccentColor"
                                    value="#3b82f6">
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end pt-6 border-t">
                        <button type="submit" 
                            id="aiSubmitButton"
                            class="btn btn-primary"
                            onclick="submitAiForm(event)">
                            <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                            </svg>
                            Générer la page
                        </button>
                    </div>
                </form>

                <!-- Formulaire de création depuis URL -->
                <form id="urlForm" class="space-y-6" style="display: none;">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="url">
                            URL de la page à importer
                        </label>
                        <input 
                            type="url" 
                            id="url" 
                            name="url" 
                            class="input-field"
                            placeholder="https://example.com/page"
                            required>
                        <div class="error-message" id="url-error"></div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2" for="urlVideoUrl">
                            URL de la vidéo (optionnel)
                        </label>
                        <input 
                            type="url" 
                            id="urlVideoUrl" 
                            name="videoUrl" 
                            class="input-field"
                            placeholder="https://www.youtube.com/watch?v=...">
                        <div class="error-message" id="urlVideoUrl-error"></div>
                    </div>

                    <div>
                        <h2 class="text-lg font-medium text-gray-900 mb-4">Couleurs de la page</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur principale
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="urlPrimaryColor"
                                    value="#1279FD">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur secondaire
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="urlSecondaryColor"
                                    value="#0e63d1">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Couleur d'accent
                                </label>
                                <input 
                                    type="color" 
                                    class="color-picker" 
                                    id="urlAccentColor"
                                    value="#3b82f6">
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end pt-6 border-t">
                        <button type="submit" 
                            id="urlSubmitButton"
                            class="btn btn-primary"
                            onclick="submitUrlForm(event)">
                            <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                            </svg>
                            Générer la page
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script>
        function selectCreationMethod(method) {
            const manualForm = document.getElementById('manualForm');
            const aiForm = document.getElementById('aiForm');
            const urlForm = document.getElementById('urlForm');
            const manualCreation = document.getElementById('manualCreation');
            const aiCreation = document.getElementById('aiCreation');
            const urlCreation = document.getElementById('urlCreation');

            // Reset all forms and selections
            [manualForm, aiForm, urlForm].forEach(form => form.style.display = 'none');
            [manualCreation, aiCreation, urlCreation].forEach(el => el.classList.remove('selected'));

            // Show selected form and highlight selection
            switch(method) {
                case 'manual':
                    manualForm.style.display = 'block';
                    manualCreation.classList.add('selected');
                    break;
                case 'ai':
                    aiForm.style.display = 'block';
                    aiCreation.classList.add('selected');
                    break;
                case 'url':
                    urlForm.style.display = 'block';
                    urlCreation.classList.add('selected');
                    break;
            }
        }

        function initTinyMCE(selector) {
            return tinymce.init({
                selector: selector,
                height: 300,
                menubar: false,
                plugins: [
                    'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                    'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                    'insertdatetime', 'media', 'table', 'help', 'wordcount'
                ],
                toolbar: 'undo redo | blocks | ' +
                    'bold italic forecolor | alignleft aligncenter ' +
                    'alignright alignjustify | bullist numlist outdent indent | ' +
                    'removeformat | help',
                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'
            });
        }

        function updateSlug() {
            const title = document.getElementById('title').value;
            const slug = title.toLowerCase()
                .replace(/[éèêë]/g, 'e')
                .replace(/[àâä]/g, 'a')
                .replace(/[ùûü]/g, 'u')
                .replace(/[îï]/g, 'i')
                .replace(/[ôö]/g, 'o')
                .replace(/[ç]/g, 'c')
                .replace(/[^a-z0-9]+/g, '-')
                .replace(/^-+|-+$/g, '');
            document.getElementById('slug').value = slug;
        }

        function validateImageSize(input) {
            const maxSize = 5 * 1024 * 1024; // 5 Mo
            if (input.files[0] && input.files[0].size > maxSize) {
                alert('L\'image ne doit pas dépasser 5 Mo');
                input.value = '';
            }
        }

        function showError(fieldId, message) {
            const errorDiv = document.getElementById(`${fieldId}-error`);
            const input = document.getElementById(fieldId);
            if (errorDiv) {
                errorDiv.textContent = message;
                errorDiv.style.display = message ? 'block' : 'none';
            }
            if (input) {
                input.classList.toggle('error', Boolean(message));
            }
        }

        function clearErrors() {
            document.querySelectorAll('.error-message').forEach(el => {
                el.textContent = '';
                el.style.display = 'none';
            });
            document.querySelectorAll('.input-field').forEach(el => {
                el.classList.remove('error');
            });
        }

        async function submitForm(event) {
            event.preventDefault();
            clearErrors();

            const submitButton = document.getElementById('submitButton');
            submitButton.classList.add('loading');
            submitButton.disabled = true;

            try {
                const sections = [];
                const uploadPromises = [];
                
                for (const sectionElement of document.querySelectorAll('[data-section-id]')) {
                    const type = sectionElement.querySelector('select').value;
                    const section = { type };

                    switch(type) {
                        case 'hero':
                            section.title = sectionElement.querySelector('input[type="text"]').value;
                            section.content = tinymce.get(`${sectionElement.dataset.sectionId}-content`).getContent();
                            
                            // On récupère maintenant l'URL de la vidéo dans Hero
                            section.videoUrl = sectionElement.querySelector('input[type="url"]').value;
                            break;
                        case 'video':
                            section.title = sectionElement.querySelector('input[type="text"]').value;
                            
                            // On récupère l'image depuis A propos (anciennement Vidéo+Description)
                            const imageFile = sectionElement.querySelector('input[type="file"]').files[0];
                            if (imageFile) {
                                const imageFormData = new FormData();
                                imageFormData.append('image', imageFile);
                                
                                uploadPromises.push(
                                    fetch('/admin/upload-image', {
                                        method: 'POST',
                                        body: imageFormData
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        section.imageUrl = data.location;
                                    })
                                );
                            }

                            // Champ "Description" reste identique
                            section.content = tinymce.get(`${sectionElement.dataset.sectionId}-description`).getContent();
                            break;
                        case 'features':
                            section.content = tinymce.get(`${sectionElement.dataset.sectionId}-intro`).getContent();
                            section.features = [];
                            sectionElement.querySelectorAll('.feature-item').forEach(featureElement => {
                                const featureId = featureElement.querySelector('.tinymce').id.replace('-content', '');
                                section.features.push({
                                    title: featureElement.querySelector('input[type="text"]').value,
                                    description: tinymce.get(`${featureId}-content`).getContent()
                                });
                            });
                            break;
                        case 'conclusion':
                            section.content = tinymce.get(`${sectionElement.dataset.sectionId}-conclusion`).getContent();
                            break;
                    }

                    sections.push(section);
                }

                await Promise.all(uploadPromises);

                const formData = new FormData(document.getElementById('manualForm'));
                formData.set('sections',JSON.stringify(sections));

                const colors = {
                    primary: document.getElementById('primaryColor').value,
                    secondary: document.getElementById('secondaryColor').value,
                    accent: document.getElementById('accentColor').value
                };
                formData.set('colors', JSON.stringify(colors));

                const response = await fetch('/admin/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(Object.fromEntries(formData)),
                });

                const data = await response.json();

                if (response.ok) {
                    window.location.href = data.redirect;
                } else {
                    if (data.errors) {
                        Object.entries(data.errors).forEach(([field, message]) => {
                            showError(field, message);
                        });
                    }
                }
            } catch (error) {
                console.error('Erreur:', error);
                showError('general', 'Une erreur est survenue lors de la création de la page');
            } finally {
                submitButton.classList.remove('loading');
                submitButton.disabled = false;
            }
        }

        async function submitAiForm(event) {
            event.preventDefault();
            clearErrors();

            const submitButton = document.getElementById('aiSubmitButton');
            const loadingOverlay = document.getElementById('loadingOverlay');
            
            submitButton.classList.add('loading');
            submitButton.disabled = true;
            loadingOverlay.style.display = 'flex';

            try {
                const formData = new FormData();
                formData.append('title', document.getElementById('aiTitle').value);
                formData.append('heroImage', document.getElementById('heroImage').files[0]);
                formData.append('videoUrl', document.getElementById('videoUrl').value);
                
                const colors = {
                    primary: document.getElementById('aiPrimaryColor').value,
                    secondary: document.getElementById('aiSecondaryColor').value,
                    accent: document.getElementById('aiAccentColor').value
                };
                formData.append('colors', JSON.stringify(colors));

                const response = await fetch('/admin/create-with-ai', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok) {
                    window.location.href = data.redirect;
                } else {
                    if (data.errors) {
                        Object.entries(data.errors).forEach(([field, message]) => {
                            showError(field === 'title' ? 'aiTitle' : field, message);
                        });
                    }
                }
            } catch (error) {
                console.error('Erreur:', error);
                showError('general', 'Une erreur est survenue lors de la création de la page');
            } finally {
                submitButton.classList.remove('loading');
                submitButton.disabled = false;
                loadingOverlay.style.display = 'none';
            }
        }

        async function submitUrlForm(event) {
            event.preventDefault();
            clearErrors();

            const submitButton = document.getElementById('urlSubmitButton');
            const loadingOverlay = document.getElementById('loadingOverlay');
            
            submitButton.classList.add('loading');
            submitButton.disabled = true;
            loadingOverlay.style.display = 'flex';

            try {
                const formData = {
                    url: document.getElementById('url').value,
                    videoUrl: document.getElementById('urlVideoUrl').value,
                    colors: {
                        primary: document.getElementById('urlPrimaryColor').value,
                        secondary: document.getElementById('urlSecondaryColor').value,
                        accent: document.getElementById('urlAccentColor').value
                    }
                };

                const response = await fetch('/admin/create-from-url', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    window.location.href = data.redirect;
                } else {
                    if (data.errors) {
                        Object.entries(data.errors).forEach(([field, message]) => {
                            showError(field, message);
                        });
                    }
                }
            } catch (error) {
                console.error('Erreur:', error);
                showError('url', 'Une erreur est survenue lors de la création de la page');
            } finally {
                submitButton.classList.remove('loading');
                submitButton.disabled = false;
                loadingOverlay.style.display = 'none';
            }
        }

        function addSection() {
            const sectionsContainer = document.getElementById('sections');
            const sectionIndex = sectionsContainer.children.length;
            const sectionId = `section-${Date.now()}`;

            const sectionHTML = `
                <div class="form-card p-6" data-section-id="${sectionId}">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Type de section
                        </label>
                        <select onchange="updateSectionFields(this)" 
                            class="input-field">
                            <option value="hero">Hero</option>
                            <option value="video">A propos</option>
                            <option value="features">Fonctionnalités</option>
                            <option value="conclusion">Conclusion</option>
                        </select>
                    </div>

                    <div class="section-fields">
                        <!-- Les champs seront mis à jour en fonction du type -->
                    </div>

                    <button type="button" 
                        class="mt-4 btn btn-danger"
                        onclick="removeSection(this)">
                        <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                        Supprimer la section
                    </button>
                </div>
            `;

            sectionsContainer.insertAdjacentHTML('beforeend', sectionHTML);
            const newSection = sectionsContainer.lastElementChild;
            updateSectionFields(newSection.querySelector('select'));
        }

        function updateSectionFields(selectElement) {
            const sectionContainer = selectElement.closest('[data-section-id]');
            const sectionId = sectionContainer.dataset.sectionId;
            const fieldsContainer = sectionContainer.querySelector('.section-fields');
            const type = selectElement.value;

            // Remove any existing TinyMCE instances in this section
            const existingEditors = sectionContainer.querySelectorAll('.tinymce');
            existingEditors.forEach(editor => {
                const editorId = editor.id;
                if (tinymce.get(editorId)) {
                    tinymce.remove(`#${editorId}`);
                }
            });

            let fieldsHTML = '';
            switch(type) {
                case 'hero':
                    fieldsHTML = `
                        <div class="space-y-4">
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Titre</label>
                                    <button type="button" 
                                        class="text-sm text-blue-600 hover:text-blue-800"
                                        onclick="regenerateContent('hero-content', this.closest('.section-fields'))">
                                        <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                        </svg>
                                        Générer
                                    </button>
                                </div>
                                <input type="text" class="input-field">
                            </div>
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Texte</label>
                                    <button type="button" 
                                        class="text-sm text-blue-600 hover:text-blue-800"
                                        onclick="regenerateContent('hero-content', this.closest('.section-fields'))">
                                        <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                        </svg>
                                        Générer
                                    </button>
                                </div>
                                <textarea id="${sectionId}-content" class="tinymce"></textarea>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">URL de la vidéo</label>
                                <input type="url" class="input-field" placeholder="https://www.youtube.com/watch?v=...">
                            </div>
                        </div>
                    `;
                    break;
                case 'video':
                    fieldsHTML = `
                        <div class="space-y-4">
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Titre</label>
                                    <button type="button" 
                                        class="text-sm text-blue-600 hover:text-blue-800"
                                        onclick="regenerateContent('video-title', this.closest('.section-fields'))">
                                        <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                        </svg>
                                        Générer
                                    </button>
                                </div>
                                <input type="text" class="input-field">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Image</label>
                                <input type="file" 
                                    accept="image/*" 
                                    class="input-field"
                                    onchange="validateImageSize(this)">
                                <p class="text-sm text-gray-500 mt-1">Taille maximale : 5 Mo</p>
                            </div>
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                                    <button type="button" 
                                        class="text-sm text-blue-600 hover:text-blue-800"
                                        onclick="regenerateContent('video-description', this.closest('.section-fields'))">
                                        <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                        </svg>
                                        Générer
                                    </button>
                                </div>
                                <textarea id="${sectionId}-description" class="tinymce"></textarea>
                            </div>
                        </div>
                    `;
                    break;
                case 'features':
                    fieldsHTML = `
                        <div class="space-y-4">
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Texte d'introduction</label>
                                    <button type="button" 
                                        class="text-sm text-blue-600 hover:text-blue-800"
                                        onclick="regenerateContent('features-intro', this.closest('.section-fields'))">
                                        <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                        </svg>
                                        Générer
                                    </button>
                                </div>
                                <textarea id="${sectionId}-intro" class="tinymce"></textarea>
                            </div>
                            <div class="features-list space-y-4">
                                <!-- Les fonctionnalités seront ajoutées ici -->
                            </div>
                            <button type="button" 
                                class="btn bg-green-500 text-white hover:bg-green-600"
                                onclick="addFeature(this)">
                                <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                                </svg>
                                Ajouter une fonctionnalité
                            </button>
                        </div>
                    `;
                    break;
                case 'conclusion':
                    fieldsHTML = `
                        <div>
                            <div class="flex items-center justify-between">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Texte</label>
                                <button type="button" 
                                    class="text-sm text-blue-600 hover:text-blue-800"
                                    onclick="regenerateContent('conclusion', this.closest('.section-fields'))">
                                    <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                    </svg>
                                    Générer
                                </button>
                            </div>
                            <textarea id="${sectionId}-conclusion" class="tinymce"></textarea>
                        </div>
                    `;
                    break;
            }

            fieldsContainer.innerHTML = fieldsHTML;

            // Initialize TinyMCE for all new editors in this section
            const newEditors = fieldsContainer.querySelectorAll('.tinymce');
            newEditors.forEach(editor => {
                initTinyMCE(`#${editor.id}`);
            });

            if (type === 'features') {
                addFeature(fieldsContainer.querySelector('button'));
            }
        }

        function addFeature(button) {
            const featuresList = button.closest('.section-fields').querySelector('.features-list');
            const featureId = `feature-${Date.now()}`;
            
            const featureHTML = `
                <div class="feature-item form-card p-6">
                    <div class="space-y-4">
                        <div>
                            <div class="flex items-center justify-between">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Titre</label>
                                <button type="button" 
                                    class="text-sm text-blue-600 hover:text-blue-800"
                                    onclick="regenerateContent('feature-title', this.closest('.feature-item'))">
                                    <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                    </svg>
                                    Générer
                                </button>
                            </div>
                            <input type="text" class="input-field">
                        </div>
                        <div>
                            <div class="flex items-center justify-between">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                                <button type="button" 
                                    class="text-sm text-blue-600 hover:text-blue-800"
                                    onclick="regenerateContent('feature-description', this.closest('.feature-item'))">
                                    <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                    </svg>
                                    Générer
                                </button>
                            </div>
                            <textarea id="${featureId}-content" class="tinymce"></textarea>
                        </div>
                        <button type="button" 
                            class="btn btn-danger"
                            onclick="removeFeature(this)">
                            <svg class="w-5 h-5 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                            Supprimer
                        </button>
                    </div>
                </div>
            `;
            featuresList.insertAdjacentHTML('beforeend', featureHTML);
            initTinyMCE(`#${featureId}-content`);
        }

        function removeFeature(button) {
            const feature = button.closest('.feature-item');
            const editorId = feature.querySelector('.tinymce').id;
            if (tinymce.get(editorId)) {
                tinymce.remove(`#${editorId}`);
            }
            feature.remove();
        }

        function removeSection(button) {
            const section = button.closest('[data-section-id]');
            const editors = section.querySelectorAll('.tinymce');
            editors.forEach(editor => {
                const editorId = editor.id;
                if (tinymce.get(editorId)) {
                    tinymce.remove(`#${editorId}`);
                }
            });
            section.remove();
        }

        async function regenerateContent(type, container) {
            const title = document.getElementById('title').value;
            if (!title) {
                alert('Veuillez d\'abord saisir un titre pour la page');
                return;
            }

            try {
                const response = await fetch('/admin/regenerate-content', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ type, title })
                });

                const data = await response.json();

                if (response.ok) {
                    // Find the appropriate TinyMCE editor and update its content
                    let editorId;
                    switch(type) {
                        case 'hero-content':
                            editorId = container.querySelector('.tinymce').id;
                            break;
                        case 'video-description':
                            editorId = container.querySelector('.tinymce').id;
                            break;
                        case 'features-intro':
                            editorId = container.querySelector('.tinymce').id;
                            break;
                        case 'feature-description':
                            editorId = container.querySelector('.tinymce').id;
                            break;
                        case 'conclusion':
                            editorId = container.querySelector('.tinymce').id;
                            break;
                    }

                    if (editorId && tinymce.get(editorId)) {
                        tinymce.get(editorId).setContent(data.content);
                    }
                } else {
                    throw new Error(data.error || 'Une erreur est survenue');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de la génération du contenu');
            }
        }

        // Ajouter une première section par défaut
        addSection();
    </script>
</body>
</html>
